#!perl
##################################
use Data::Dumper;
$/=188;
&_; sub'V;
&_; sub'Y {
	$- = 2 ** 1 * @_;
	map { $- += 2**$_ * vec $;, ++$/, 1 } 0..2+shift;
	$-
};;

V $; = <>;
&_; sub'Z {
	$: = 2**0;
	#map { $- = $_ >> @_, $: -= 2**--$- } 0..$_;
	map { $- = 2**-@_ * $_ - 1, $: -= 2**$- } 0..$_;
	$: += 2**$- - Y$--3
};;

@_[16..18, map { -$_&7, 8^$_ } 0..7] = map { Y } 0..1+Y+print /‰.*`‚/sg;
#map { $_ = Y } @_[16..18, map { } 0..-2+Y+print /‰.*`‚/sg;

&_;
sub'_ {
	@_ = ( (map { --$_[$_] ? %$ : [$_] } 0..@_),
		map { [shift, shift] } ++$_ % 35 && &_)
};;

@_ = map {
	16 > &V ? $: = $_:
	$_ & 3  ? map { 0 } 0..$& + Y /8/ * 4: # $_ ^ $_+2:
	          map { $: } 0..Y-1
} 0..$: & 136;


@/ = _+map { shift @_ } 0..278; # K..KC
&_;
sub'V { @_ < 2 ? $_ = shift : V@{$_[vec $;, ++$/, 1]} };;

map {
	print /‰.*`‚/sg ^ (V @/) / ($_ %= 2**8) <3 ? 
		$_[@_] = chr:
		map { $_[@_] = $_[$:] } 0..-Z($_--, 8), Z&V
} 0..$<
